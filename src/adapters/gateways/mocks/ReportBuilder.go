// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/kou-pg-0131/qiita-lgtm-ranking/src/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ReportBuilder is an autogenerated mock type for the ReportBuilder type
type ReportBuilder struct {
	mock.Mock
}

// Weekly provides a mock function with given fields: from, items
func (_m *ReportBuilder) Weekly(from time.Time, items entities.Items) (*entities.Report, error) {
	ret := _m.Called(from, items)

	var r0 *entities.Report
	if rf, ok := ret.Get(0).(func(time.Time, entities.Items) *entities.Report); ok {
		r0 = rf(from, items)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Report)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, entities.Items) error); ok {
		r1 = rf(from, items)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WeeklyByTag provides a mock function with given fields: from, items, tag
func (_m *ReportBuilder) WeeklyByTag(from time.Time, items entities.Items, tag string) (*entities.Report, error) {
	ret := _m.Called(from, items, tag)

	var r0 *entities.Report
	if rf, ok := ret.Get(0).(func(time.Time, entities.Items, string) *entities.Report); ok {
		r0 = rf(from, items, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Report)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, entities.Items, string) error); ok {
		r1 = rf(from, items, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
