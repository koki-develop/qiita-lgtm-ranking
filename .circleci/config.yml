version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.1

executors:
  go:
    docker:
      - image: golang:1.16

commands:
  create_dotenv:
    steps:
      - run:
          name: create .env
          command: |
            echo "QIITA_ACCESS_TOKEN=${QIITA_ACCESS_TOKEN}" > .env

  setup_aws_config:
    steps:
      - aws-cli/install
      - aws-cli/assume-role-with-web-identity:
          role-arn: ${AWS_IAM_ROLE_ARN}

  go_mod_download:
    steps:
      - restore_cache:
          key: go-mod-v1-{{ .Branch }}-{{ checksum "go.sum" }}
      - run: go mod download -x
      - save_cache:
          key: go-mod-v1-{{ .Branch }}-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod

  install_nodejs:
    steps:
      - run:
          name: install nodejs
          command: |
            curl -fsSL https://deb.nodesource.com/setup_14.x | bash -
            apt install -y nodejs
      - run:
          name: install yarn
          command: |
            npm install --global yarn

  yarn_install:
    steps:
      - restore_cache:
          key: v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run: yarn install --check-files
      - save_cache:
          key: v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

jobs:
  test:
    executor: go
    steps:
      - checkout
      - go_mod_download
      - run:
          name: go test
          command: ./bin/test
      - store_artifacts:
          path: cover.html

  deploy:
    executor: go
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - setup_aws_config
      - create_dotenv
      - install_nodejs
      - yarn_install
      - go_mod_download
      - run:
          name: deploy
          command: |
            yarn run deploy --stage << parameters.stage >>

workflows:
  build:
    jobs:
      - test

      - approval_deploy:
          type: approval
          requires: [test]

      - deploy:
          name: deploy_dev
          stage: dev
          requires: [approval_deploy]
          filters:
            branches:
              ignore: main

      - deploy:
          name: deploy_prod
          stage: prod
          requires: [approval_deploy]
          filters:
            branches:
              only: main
